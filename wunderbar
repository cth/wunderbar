#!/usr/bin/env ruby
# This is the code for Wunderbar, a tool for detecting mislabeled and swapped samples
# by matching with "barcode genotypes" in GWAS studies 
# Christian Theil Have, 2014.

require 'optparse'

# DF is a simplistic sequential data file reader with R data.frame like capabilities,
# but without having to load the whole thing into memory
class DF
	def initialize(file,opts=nil) 
		@file = file
		@opts = opts.nil? ? {} : opts 
		@opts[:separator] ||= / +/
		@opts[:header] ||= false

		@field_names = []
		@field_name_indices = {}
	end

	def each(*fields)
		# automatically assume file with header if named fields are requested
		@opts[:header] ||= (fields.map { |f| f.class }).include?(String)

		File.open(@file) do |f|
			lineno = 0
			f.each do |line|
				line_fields = line.chomp.split(@separator).drop_while { |fn| fn =~ /^ *$/ }
				next if line_fields.empty?
				lineno = lineno + 1
				if lineno == 1 and @opts[:header] == true then
					@field_names = line_fields
					0.upto(@field_names.size-1) { |i| @field_name_indices[@field_names[i]] = i }
					next
				end

				extract_line_fields = []

				fields = 0.step(line_fields.size-1,1).to_a if fields.empty? 

				fields.each do |field|
					if field.class == Fixnum then
						extract_line_fields << line_fields[field]
					elsif field.class == String then
						throw "invalid field name '#{field}'" if @field_name_indices[field].nil?
						extract_line_fields << line_fields[@field_name_indices[field]]
					end
				end
				if extract_line_fields.length > 1
					yield extract_line_fields
				else
					yield extract_line_fields.first
				end
			end
		end
	end
end


# Add a method to calculate binomial coefficients to the Integer class
class Integer
	def choose(k)
		pTop = (self-k+1 .. self).inject(1, &:*)
		pBottom = (2 .. k).inject(1, &:*)
		pTop / pBottom
	end
end

# Represent a Binomial
class Binomial
	attr_reader :top, :bottom
	def initialize(top,bottom)
		@top,@bottom = top,bottom
	end

	def to_i
		@top.choose(bottom)
	end

	def to_s
		"#{@top} choose #{@bottom}"
	end
end

# Extend Array class with capabilities for sampling random elements
class Array
	def sum
		if self.size == 0
			0
		else
			self.inject { |r,n| r+n }
		end
	end

	# Select a random element with given (or uniform) probability
	def random_select(probs=nil)
		threshold = rand

		throw "probs doesnt match array length" unless probs.nil? or probs.size == self.size
		cumulative_sum = 0
		0.upto(self.size-1) do |i|
			if probs.nil? then
				cumulative_sum = cumulative_sum + (1 / self.size.to_f)
			else
				cumulative_sum = cumulative_sum + probs[i]
			end
			return self[i] if cumulative_sum > threshold
		end
		self[self.size-1]	
	end

	# Sample n elements without replacement
	def sample_n(n,probs=nil)
		samples = []
		throw "Cannot samples #{n} from an array of size #{self.size}" if n > self.size
		while samples.size != n
			e = self.random_select(probs)
			samples << e unless samples.include?(e)
		end
		samples
	end
end

def normalize_cnts(arr) 
	sum = arr.sum
	arr.map { |x| x.to_f / sum }
end

def make_numeric_geno 
	@snp_particids.keys.each do |snp|
		counts = {}
		@snp_particids[snp].each do |hsh|
			counts[hsh[:a1]] ||= 1
			counts[hsh[:a1]] = counts[hsh[:a1]] + 1 
			counts[hsh[:a2]] ||= 1
			counts[hsh[:a2]] = counts[hsh[:a2]] + 1 
		end

		# Determine major and minor allele
		major = (lambda { |cnts| cnts.inject { |p,n| n.last > p.last ? n : p }.first }).call(counts)
		minor = (lambda { |cnts| cnts.inject { |p,n| n.last < p.last ? n : p }.first }).call(counts)

		# Genotypes are coded using numerical values: major:major=3, major:minor=2, minor:minor=1
		@snp_particids[snp].each do |hsh|
			if hsh[:a1].nil? or hsh[:a2].nil? then
				hsh[:numeric_geno] = 0
			else
				hsh[:numeric_geno] = ((hsh[:a1] == major) ? 2 : 1) + ((hsh[:a2] == major) ? 2 : 1)
			end
		end
	end
end

# This class handles loading of plink files
class Genotypes
	attr_accessor :snps		# list of snps in plink-file (from .map file)
	attr_accessor :individuals	# list of individual ids (IID) in plink. We require these to be unique
	attr_accessor :genotypes	# A two-dim array with @snps.size columns and @individuals.size rows 
	attr_accessor :snps_index	# @snps_index maps from snp name to column id in @genotypes 
	attr_accessor :individuals_index # @individuals_index maps from IID to row index in @genotypes
	attr_accessor :snp_freq		# genotype frequencies by SNP

	def initialize(plinkstem=nil,snps=nil) 
		@snps = []
		@individuals = [] 
		@genotypes = [] 
		@individuals_index = {}
		@snps_index = {}
		load12(plinkstem,snps) unless plinkstem.nil?
		compute_frequencies
	end

	# Genotypes are expected to be in numeric, tab-separated format, as produced when using the --recode12 --tab
	# option of plink
	def load12(plinkstem,snps)  
		# Read plink .map to get a list of snps 
		DF.new(plinkstem + ".map").each { |chr,snp,cm,pos| @snps << chr.to_s + ":" + pos.to_s }

		# init @snps_index 
		0.upto(@snps.size-1) { |i| @snps_index[@snps[i]] = i } 

		rel_snp_ids = (snps.delete_if { |snp| @snps_index[snp].nil? }).map { |snp| @snps_index[snp] } unless snps.nil?
		
		# fill up genotypes and individuals from .ped file
		File.open(plinkstem + ".ped") do |ped|
			ped.each do |line|
				fields = line.chomp.split("\t")
				@individuals << fields[0] + " " + fields[1]
				6.times { fields.shift }  # Skip sample information fields
				throw "Mismatch in number of genotypes #{fields.size} != #{@snps.size}" unless fields.size == @snps.size
				# Select relevant fields
				if snps.nil? then
					relevant_fields = fields
				else
					relevant_fields = []
					0.upto(fields.size) { |i| relevant_fields << fields[i] if rel_snp_ids.include?(i) }
				end
	
				# Convert the two alleles to a number between 0-4, where 0=Missing, 1=AA, 2=AB, 3=BB
				@genotypes << relevant_fields.map { |f| nf = f.split(" ").sort.map { |g| g.to_i }.inject { |r,e| r+e==0 ? 0 : ((r+e)-1).abs }  }
			end
		end

		# init @individuals_index
		0.upto(@individuals.size-1) { |i| @individuals_index[@individuals[i]] = i } 

		# re-init @snps and @snps_index if necessary
		if not snps.nil? then
			new_snps = []
			new_snps_index = {}
			@snps.each do |snp| 
				new_snps << snp if snps.include?(snp)
				new_snps_index[snp] = new_snps.size-1
			end
			
			# overwrite old
			@snps_index = new_snps_index
			@snps = new_snps
		end
	end

	def compute_frequencies
		@snp_freq = {}
		@snps.each do |snp|
			@snp_freq[snp] = {}
			snp_id = @snps_index[snp]
			snp_genotypes = []
			0.upto(@genotypes.size-1) { |i| snp_genotypes << @genotypes[i][snp_id] }
			[0,1,2,3].each do |genotype|
					@snp_freq[snp][genotype] = (snp_genotypes.select { |g| g==genotype }).size.to_f / snp_genotypes.size.to_f
			end
		end
	end


	def each_by_snp(snp) 
		snp_id = @snps_index[snp]
		@individuals.each do |i|
			yield [ i, @genotypes[@individuals_index[i]][snp_id] ]
		end
	end

	def each_by_indv(indv)
		indv_id = @individuals_index[indv]
		@snps.each do |snp|
			snp_id = @snps_index[snp] 
			yield [ snp, @genotypes[indv_id][snp_id] ]	
		end
	end

	def include_individual?(indv)
		not @individuals_index[indv].nil?
	end

	def include_snp?(snp)
		not @snps_index[snp].nil?
	end

	def [](indv,snp) 
		#puts "indv: " + indv.to_s
		#puts "snp: " + snp.to_s
		genotypes[@individuals_index[indv]][@snps_index[snp]]
	end

	def to_s
		"#{individuals.size}x#{snps.size} genotype matrix"
	end

	# Create a random set of genotypes for one individual, in corrspondence with genotype frequencies
	def random_sample
		snp_genotypes = {} 
		@snps.each do |snp|
			probs = normalize_cnts([1,2,3].map { |gt| @snp_freq[snp][gt] })
			snp_genotypes[snp] = [1,2,3].random_select(probs)
		end
		snp_genotypes
	end
end

class Matcher
	# Initialize with 
	def initialize(config) 
		@config = config
		# Read all barcoding genotypes from plink files
		@barcode_genotypes = Genotypes.new(@config[:barcode_file])
		# Read only barcoding genotypes from testset plink files
		@test_genotypes = Genotypes.new(@config[:file],@barcode_genotypes.snps)
		puts "barcodes: " + @barcode_genotypes.to_s
		puts "test snps: " + @test_genotypes.to_s

		if @barcode_genotypes.individuals.size == 0 or @test_genotypes.individuals.size == 0 
			abort "Cannot match genotypes of zero individuals. Exiting."
		end


		if @barcode_genotypes.snps.size == 0 or @test_genotypes.snps.size == 0 
			abort "Insufficient genotypes for matching. Have you checked that positions match?" 
		end



		#puts "Sampling p-value distributions for mismatch binomials:"
		#sample_mismatch_distributions( @config[:mismatch_adjust].to_i )
		File.open("pvalues.txt", "w") do |file|
			@pscores = random_match_scores
			@pscores.each { |i| file.puts i }
		end
	end

	# returns true if value is nil or zero
	def nilz(x)
		x.nil? or x==0 
	end

	# Match each SNP to its equivalent SNP in other dataset
	# This is to check that snp-wise correspondance is ok
	# If this is ok, we can then use to detect outlying individuals
	def match_snps
		@snp_stats = {}
		@mismatches = {}

		#pbar = ProgressBar.new("Single barcode match", @barcode_genotypes.snps.size)
		@barcode_genotypes.snps.each do |snp|
			#pbar.inc
			matching,mismatch,unknown = 0,0,0
			@test_genotypes.each_by_snp(snp) do |indv,gt|
				if not @barcode_genotypes.include_individual?(indv) or nilz(gt) or nilz(@barcode_genotypes[indv,snp]) then
					unknown = unknown + 1
				elsif gt == @barcode_genotypes[indv,snp] 
					matching = matching + 1
				else
					mismatch = mismatch + 1
					@mismatches[indv] ||= []
					@mismatches[indv] << snp
				end
			end
			@snp_stats[snp] = { :match => matching, :mismatch => mismatch, :missing => unknown, :total => matching+mismatch+unknown }
		end

		#pbar.finish

		# Sample from @snp_stats to get expected distribution
		@sampled_mismatch_probs = []
		1.upto(@config[:sampling_iterations]) do |i|
			prob = 1
			@snp_stats.each do |snp,stat|
				#puts stat.inspect
				outcomes = [ :match, :mismatch, :missing ]
				probs = normalize_cnts([ stat[:match] , stat[:mismatch], stat[:missing] ].map { |s| s.to_f / stat[:total] })
				#puts probs.inspect
				prob = prob*probs[1] if outcomes.random_select(probs) == :mismatch
			end
			@sampled_mismatch_probs << prob
		end

		# calculate e-values and p-values
		@individual_match = {}
		@test_genotypes.individuals.each do |indv|
			prob = 1
			nmismatch = 0
			if @mismatches[indv].nil? then
				pvalue = 1
				evalue = @test_genotypes.individuals.size 
			else
				@mismatches[indv].each do |snp|
					prob = prob  * (@snp_stats[snp][:mismatch].to_f / (@snp_stats[snp][:mismatch].to_f + @snp_stats[snp][:match].to_f))
				end

				pvalue =  pscore_to_pvalue(@sampled_mismatch_probs,prob) 
			
				# Ok, this is messy. We want to take into account that some SNPs may be missing.
				avg_samples = (@mismatches[indv].map { |snp| @snp_stats[snp][:total] }).inject { |r,v| r+v } / @mismatches[indv].size.to_f
				evalue = pvalue * avg_samples
				nmismatch = @mismatches[indv].size
			end
			@individual_match[indv] = { :indv => indv, :prob => prob, :pvalue => pvalue, :evalue => evalue, :nmismatch => nmismatch }
		end
	end

	def create_match_report(output_file)
		indvs = []
		@individual_match.each { |_,v| indvs << v }
		keys = indvs.first.keys
	
		indvs = indvs.sort_by {  |a| a[:pvalue] } # <=> b[:pvalue] }

		File.open(output_file, "w") do |file|
			file.puts (keys.map { |x| x.upcase }).join("\t")
			indvs.each { |i| file.puts (keys.map { |k| i[k] }).join("\t") }
		end
	end

	def swap_match
		# Construct alignment matrix between all mismatching samples
		@swaps = []
		#pbar = ProgressBar.new("Swap matching", @barcode_genotypes.individuals.size * @test_genotypes.individuals.size)
		@barcode_genotypes.individuals.each do |indv_bar|
			@test_genotypes.individuals.each do |indv_test|
				#pbar.inc
				next if indv_bar == indv_test

				next if @individual_match[indv_bar][:pvalue] > @config[:p_max]
				next if @individual_match[indv_test][:pvalue] > @config[:p_max]

				#next unless @mismatches.include?(indv_bar) 

				unknown = 0
				matching = []
				mismatch = []
				@test_genotypes.each_by_indv(indv_test) do |snp,gt|
					other_gt = @barcode_genotypes[indv_bar,snp] 

					if nilz(gt) or nilz(other_gt) then
						unknown = unknown + 1
					elsif gt == other_gt then
						matching << [ snp, gt ]
					else
						mismatch << [ snp, gt ]
					end
				end

				total = matching.size + unknown + mismatch.size 
				# p-value for match: Product of all the genotype frequencies (in @test_genotypes) for matching SNPs 
				p_score = 1
				matching.each { |snp,gt| p_score = p_score * @test_genotypes.snp_freq[snp][gt] }
				inf_ratio = ld_inflation_ratio(mismatch,matching,p_score)
				p_score = p_score * ld_inflation_ratio(mismatch,matching,p_score)

				binomial_factor = 0
				mismatch.size.downto(1) do |s|
					binomial_factor = binomial_factor +  Binomial.new(matching.size+mismatch.size, mismatch.size).to_i
				end

				p_value = pscore_to_pvalue(@pscores,p_score)
				e_value = @test_genotypes.individuals.size*p_value

				posterior_prob = (1-p_score) * (@config[:peturb]+(1-@individual_match[indv_bar][:prob])) * (@config[:peturb]+(1-@individual_match[indv_test][:prob]))

				#next if (p_value > @config[:p_max].to_f or e_value > @config[:e_max])

				@swaps << { :original_label => indv_test, :new_label => indv_bar, :posterior => posterior_prob, :pvalue => p_value , :ld_inflation_ratio => inf_ratio , :evalue => e_value, :match => matching.size, :mismatch => mismatch.size, :unknown => unknown } 
			end
		end
		#pbar.finish
	end

	def create_swaps_report(out_file)
		if @swaps.size == 0 then 
			puts "No swaps detected"
		else 
			keys = @swaps.first.keys
			swaps = @swaps.sort do |a,b| 
				if a[:posterior] == b[:posterior] then
					b[:pvalue] <=> a[:pvalue]
				else
					a[:posterior] <=> b[:posterior]
				end
			end.reverse
			File.open(out_file, "w") do |file|
				file.puts (keys.map { |x| x.upcase }).join("\t")
				swaps.each { |swp| file.puts (keys.map { |k| swp[k] }).join("\t") }
			end

			if not @config[:dot_file].nil? then 
				File.open(@config[:dot_file], "w") do |dot_file|
					dot_file.puts "digraph G {"
						swaps.each do |swp|
							if swp[:posterior] > @config[:dot_posterior] then
								dot_file.puts '"' + swp[:original_label] +  '" -> "' + swp[:new_label] + '"'
							end
						end
					dot_file.puts "}"
				end
			end
		end
	end

	# Some SNPs may in close LD, in which case we would expect
	# an overrepresentation of certain patterns of genotypes in @test_genotypes 
	# p.values are calculated assuming independence. This fn calculates a factor to adjust for this.
	# TODO: An underrepresentation of a subset pattern may also be indicative of LD  
	def ld_inflation_ratio(mismatches,matches,p_value)
		avg_inflation_ratio = 1
		if mismatches.size > 0 then
			snp_subset_sizes = []
			# Create sample distribution of binomials
			matches.size.downto(2) { |x| snp_subset_sizes << x }
			inflation_ratios = []
			# Scale number of trials relative to extremity of p-value
			1.upto(@config[:ld_adjust].to_i) do |i|
				# randomly select number of snps in subset
				num_snps = snp_subset_sizes.random_select() 

				# Sample a corresponding number of the matching SNPs
				sampled_snps = matches.sample_n(num_snps)

				# Count number of matches for this subset 
				num_match = 0 
				@test_genotypes.individuals.each do |indv|
					# map snps to match truth value and logical and 
					if (sampled_snps.map { |snp,gt| gt == @test_genotypes[indv,snp] }).inject { |a,b| a and b } then
						num_match = num_match + 1 
					end
				end
				# We do not correct if num_match is zero
				next if num_match == 0

				# calculate probability of seeing by chance
				snp_probs = sampled_snps.map { |snp,gt| @test_genotypes.snp_freq[snp][gt] }
				next if  snp_probs.include?(nil) 
				expected_match_prob = snp_probs.inject { |a,b| a*b }
				expected_match = expected_match_prob * @test_genotypes.individuals.size 

				inf_ratio  = num_match / expected_match
				inflation_ratios << inf_ratio
			end
			avg_inflation_ratio = inflation_ratios.sum / inflation_ratios.size if @config[:ld_adjust].to_i > 0
		end
		avg_inflation_ratio
	end

	def random_match_scores
		p_scores = []
		1000.times do
			sample = @test_genotypes.random_sample()
			@test_genotypes.individuals.sample_n(@test_genotypes.individuals.size / 10).each do |indv|
				unknown = 0
				matching = []
				mismatch = []
				@test_genotypes.each_by_indv(indv) do |snp,gt|
					other_gt = sample[snp] 

					if nilz(gt) or nilz(other_gt) then
						unknown = unknown + 1
					elsif gt == other_gt then
						matching << [ snp, gt ]
					else
						mismatch << [ snp, gt ]
					end
				end
				p_score = 1
				matching.each { |snp,gt| p_score = p_score * @test_genotypes.snp_freq[snp][gt] }

				binomial_factor = 0
				mismatch.size.downto(1) do |s|
					binomial_factor = binomial_factor +  Binomial.new(matching.size+mismatch.size, mismatch.size).to_i
				end
				p_score = p_score * binomial_factor
				
				p_scores << p_score
			end
		end
		p_scores.sort
	end

	def pscore_to_pvalue(pscores,pscore)
		left = 0
		right = pscores.size-1
		i = right / 2
		
		while left != right and right - left != 1 
			if pscores[i] < pscore then
				left = i 
			else
				right = i
			end
			i = left + ((right - left) / 2).to_i
		end
		
		(1+i).to_f / pscores.size.to_f
	end	

	
	def sample_mismatch_distributions(iterations)
		binomials = []
		(@barcode_genotypes.snps.size-1).downto(1) { |x| binomials << Binomial.new(@barcode_genotypes.snps.size,x) }
		@pvalue_distribution=[]
		binomials.each do |b| 
			@pvalue_distribution[b.bottom] = sample_pvalues(b,iterations)
			File.open(b.to_s,"w") do |f| 
				@pvalue_distribution[b.bottom].each do |p|
					f.puts p	
				end
			end
		end

	end


	def sample_pvalues(binom,iterations)
		sampled_pvalues = []
 
		#pbar = ProgressBar.new("#{binom.to_s}", iterations)

		# Run sampling
		1.upto(iterations) do |i|
			#pbar.inc
			# sample n snps and calculate probability of seeing by chance 
			# uniform probability for selection of each snp and genotype within snp 
			# TODO: Should it be uniform with snp??
			sample_probs = @test_genotypes.snps.map { |x| 1.to_f / @test_genotypes.snps.size }
			sampled_snps =  @test_genotypes.snps.sample_n(binom.bottom,sample_probs)
			probs = sampled_snps.map { |snp,gt| @test_genotypes.snp_freq[snp][[0,1,2,3].random_select( @test_genotypes.snp_freq[snp])] }
			pvalue = probs.inject { |a,b| a*b }
			sampled_pvalues << pvalue
		end
		#pbar.finish
		sampled_pvalues
	end
end

##################################################
## Main control part
##################################################

@config = {}

OptionParser.new do |opts|
	opts.on( '-h', '--help', 'Display this screen' ) do
		puts opts
		exit
	end

	opts.on("-f", "--file plinkstem", "The genotypes to be tested") do |f|
		@config[:file] = f
	end

	opts.on("-b", "--barcode-file plinkstem", "The barcode genotypes") do |f|
		@config[:barcode_file] = f

	end

	opts.on("-o", "--out file", "Prefix of the output files") do |f|
		@config[:out] = f || "wunderbar"
	end

	@config[:p_max] = 1.0
	opts.on("-p", "--p-max 0..1", "Maximum p-value for single matches (default 1)") do |p|
		@config[:p_max] = p.to_f 
	end

	@config[:e_max] = 1.0
	opts.on("-e", "--e-max 0..1", "Maximum e-value for single matches (default 1)") do |e|
		@config[:e_max] = e.to_f
	end

	opts.on("--ld-adjust iterations", "Adjust for population LD structure between barcoding SNPs. Default number of iterations is 0 (Assume no LD). The more iterations the more precise the adjustment.") do |ld|
		@config[:ld_adjust] = ld || 0
	end

	opts.on("--sampling-iterations iterations", "Number of iterations to use to calculate p-value from mismatch probability distribution") do |m|
		@config[:sampling_iterations] = m.to_i || 0
	end

#	opts.on("--mismatch-probability P", "Prior mismatch probability") do |p|
#		@config[:mismatch_probability] = p.to_f
#	end

##	opts.on("-w", "--mismatch-probability-weight W", "How much confidence to put in the given mismatch-probability relative to estimation from data.") do |p|
#		@config[:mismatch_probability_weight] = p.to_f
#	end

	@config[:peturb] = 0
	opts.on("--peturb 0..1", "A very small pertubation constant to ensure that no sample gets zero mismatch probability (default 0)") do |p|
		@config[:peturb] = p.to_f
	end

	opts.on("--dot-file file", "Create .dot file for GraphViz to visualize swaps") do |file|
		@config[:dot_file] = file
	end

	@config[:dot_posterior] = 0.99 
	opts.on("--dot-posterior 0..1", "Cut-off on posterior prob-score for graphviz diagram") do |file|
		@config[:dot_file] = file
	end

end.parse!

# parse options
mandatory_fields = [ :file, :barcode_file ]

mandatory_fields.each do |field|
	throw "Missing mandatory field --#{field} is missing." if @config[field].nil?
end

@config[:out] ||= "wunderbar"


puts "Options in use:"
puts @config.inspect
puts

matcher = Matcher.new(@config) 

# single individual match
matcher.match_snps
matcher.create_match_report(@config[:out] + ".mismatch")

# swap match
matcher.swap_match
matcher.create_swaps_report(@config[:out] + ".swaps")
