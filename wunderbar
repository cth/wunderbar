#!/usr/bin/env ruby

require 'optparse'
require_relative 'df.rb'
require_relative 'utils.rb'
require_relative 'genotypes.rb'
require_relative 'matcher.rb'

#puts barcoding_snps.genotypes.inspect
#puts barcoding_snps.snps_index

@config = {}

OptionParser.new do |opts|
	opts.on( '-h', '--help', 'Display this screen' ) do
		puts opts
		exit
	end

	opts.on("-f", "--file plinkstem", "The genotypes to be tested") do |f|
		@config[:file] = f
	end

	opts.on("-b", "--barcode-file plinkstem", "The barcode genotypes") do |f|
		@config[:barcode_file] = f

	end

	opts.on("-o", "--out file", "Prefix of the output files") do |f|
		@config[:out] = f || "wunderbar"
	end

	@config[:p_max] = 1.0
	opts.on("-p", "--p-max 0..1", "Maximum p-value for single matches (default 1)") do |p|
		@config[:p_max] = p.to_f 
	end

	@config[:e_max] = 1.0
	opts.on("-e", "--e-max 0..1", "Maximum e-value for single matches (default 1)") do |e|
		@config[:e_max] = e.to_f
	end

	opts.on("-la", "--ld-adjust iterations", "Adjust for population LD structure between barcoding SNPs. Default number of iterations is 0 (Assume no LD). The more iterations the more precise the adjustment.") do |ld|
		@config[:ld_adjust] = ld || 0
	end

	opts.on("--mismatch-adjust iterations", "Adjust p-value using mismatch combinatorial p-value distribution. This should give more realistic p-values for swaps. The more iterations the more precise the adjustment. Recommended at least 10000 iterations.") do |m|
		@config[:mismatch_adjust] = m || 0
	end

	opts.on("--mismatch-probability P", "Prior mismatch probability") do |p|
		@config[:mismatch_probability] = p.to_f
	end

	opts.on("-w", "--mismatch-probability-weight W", "How much confidence to put in the given mismatch-probability relative to estimation from data.") do |p|
		@config[:mismatch_probability_weight] = p.to_f
	end

	@config[:peturb] = 0
	opts.on("--peturb 0..1", "A very small pertubation constant to ensure that no sample gets zero mismatch probability") do |p|
		@config[:peturb] = p.to_f
	end

	opts.on("--dot-file file", "Create .dot file for GraphViz to visualize swaps") do |file|
		@config[:dot_file] = file
	end
end.parse!

# parse options
mandatory_fields = [ :file, :barcode_file ]

mandatory_fields.each do |field|
	throw "Missing mandatory field --#{field} is missing." if @config[field].nil?
end

@config[:out] ||= "wunderbar"

puts "Options in use:"
puts @config.inspect
puts

matcher = Matcher.new(@config) 

# single individual match
matcher.match_snps
matcher.create_match_report(@config[:out] + ".mismatch")

# swap match
matcher.swap_match
matcher.create_swaps_report(@config[:out] + ".swaps")
